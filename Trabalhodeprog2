questao 1 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ARQUIVO "alunos.dat"
typedef struct {
    int matricula;
    char nome[50];
    char curso[30];
    int idade;
} Aluno;

void incluirAluno() {
    FILE *arquivo = fopen(ARQUIVO, "ab");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    Aluno aluno;
    printf("Digite o número de matrícula: ");
    scanf("%d", &aluno.matricula);
    getchar(); 
    printf("Digite o nome: ");
    fgets(aluno.nome, 50, stdin);
    aluno.nome[strcspn(aluno.nome, "\n")] = 0; 
    printf("Digite o curso: ");
    fgets(aluno.curso, 30, stdin);
    aluno.curso[strcspn(aluno.curso, "\n")] = 0; 
    printf("Digite a idade: ");
    scanf("%d", &aluno.idade);

    fwrite(&aluno, sizeof(Aluno), 1, arquivo);
    fclose(arquivo);

    printf("Aluno incluído com sucesso!\n");
}

void alterarAluno() {
    FILE *arquivo = fopen(ARQUIVO, "rb+");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    int matricula;
    printf("Digite o número de matrícula do aluno a ser alterado: ");
    scanf("%d", &matricula);

    Aluno aluno;
    int encontrado = 0;
    while (fread(&aluno, sizeof(Aluno), 1, arquivo)) {
        if (aluno.matricula == matricula) {
            encontrado = 1;
            printf("Digite o novo nome: ");
            getchar();
            fgets(aluno.nome, 50, stdin);
            aluno.nome[strcspn(aluno.nome, "\n")] = 0;
            printf("Digite o novo curso: ");
            fgets(aluno.curso, 30, stdin);
            aluno.curso[strcspn(aluno.curso, "\n")] = 0;
            printf("Digite a nova idade: ");
            scanf("%d", &aluno.idade);

            fseek(arquivo, -sizeof(Aluno));
            fwrite(&aluno, sizeof(Aluno), 1, arquivo);
            printf("Informações do aluno alteradas com sucesso!\n");
            break;
        }
    }
    if (!encontrado) {
        printf("Aluno não encontrado.\n");
    }
    fclose(arquivo);
}

void excluirAluno() {
    FILE *arquivo = fopen(ARQUIVO, "rb");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    FILE *temp = fopen("temp.dat", "wb");
    if (temp == NULL) {
        perror("Erro ao abrir arquivo temporário");
        fclose(arquivo);
        return;
    }

    int matricula;
    printf("Digite o número de matrícula do aluno a ser excluído: ");
    scanf("%d", &matricula);

    Aluno aluno;
    int encontrado = 0;
    while (fread(&aluno, sizeof(Aluno), 1, arquivo)) {
        if (aluno.matricula == matricula) {
            encontrado = 1;
        } else {
            fwrite(&aluno, sizeof(Aluno), 1, temp);
        }
    }

    fclose(arquivo);
    fclose(temp);

    remove(ARQUIVO);
    rename("temp.dat", ARQUIVO);

    if (encontrado) {
        printf("Aluno excluído com sucesso!\n");
    } else {
        printf("Aluno não encontrado.\n");
    }
}

void consultarAluno() {
    FILE *arquivo = fopen(ARQUIVO, "rb");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    int matricula;
    printf("Digite o número de matrícula do aluno: ");
    scanf("%d", &matricula);

    Aluno aluno;
    int encontrado = 0;
    while (fread(&aluno, sizeof(Aluno), 1, arquivo)) {
        if (aluno.matricula == matricula) {
            encontrado = 1;
            printf("\nMatrícula: %d\n", aluno.matricula);
            printf("Nome: %s\n", aluno.nome);
            printf("Curso: %s\n", aluno.curso);
            printf("Idade: %d\n", aluno.idade);
            break;
        }
    }

    if (!encontrado) {
        printf("Aluno não encontrado.\n");
    }

    fclose(arquivo);
}

void listarAlunos() {
    FILE *arquivo = fopen(ARQUIVO, "rb");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    Aluno aluno;
    printf("\nLista de Alunos Cadastrados:\n");
    while (fread(&aluno, sizeof(Aluno), 1, arquivo)) {
        printf("\nMatrícula: %d\n", aluno.matricula);
        printf("Nome: %s\n", aluno.nome);
        printf("Curso: %s\n", aluno.curso);
        printf("Idade: %d\n", aluno.idade);
    }

    fclose(arquivo);
}

int main() {
    int opcao;
    do {
        printf("\nSistema de Gerenciamento de Alunos\n");
        printf("1. Incluir aluno\n");
        printf("2. Alterar informações de um aluno\n");
        printf("3. Excluir aluno\n");
        printf("4. Consultar aluno\n");
        printf("5. Listar todos os alunos\n");
        printf("0. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                incluirAluno();
                break;
            case 2:
                alterarAluno();
                break;
            case 3:
                excluirAluno();
                break;
            case 4:
                consultarAluno();
                break;
            case 5:
                listarAlunos();
                break;
            case 0:
                printf("Saindo do programa...\n");
                break;
            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    } while (opcao != 0);      


questao 2 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ARQUIVO "funcionarios.dat"

typedef struct {
    int id;
    char nome[50];
    char cargo[30];
    int salario;
} Funcionario;

void cadastrarFuncionario() {
    FILE *arquivo = fopen(ARQUIVO, "ab");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    Funcionario func;
    printf("Digite o ID do funcionário: ");
    scanf("%d", &func.id);
    getchar(); // Consumir \n
    printf("Digite o nome completo: ");
    fgets(func.nome, 50, stdin);
    func.nome[strcspn(func.nome, "\n")] = 0; // Remover \n
    printf("Digite o cargo: ");
    fgets(func.cargo, 30, stdin);
    func.cargo[strcspn(func.cargo, "\n")] = 0; // Remover \n
    printf("Digite o salário: ");
    scanf("%d", &func.salario);

    fwrite(&func, sizeof(Funcionario), 1, arquivo);
    fclose(arquivo);

    printf("Funcionário cadastrado com sucesso!\n");
}

void alterarFuncionario() {
    FILE *arquivo = fopen(ARQUIVO, "rb+");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    int id;
    printf("Digite o ID do funcionário a ser alterado: ");
    scanf("%d", &id);

    Funcionario func;
    int encontrado = 0;
    while (fread(&func, sizeof(Funcionario), 1, arquivo)) {
        if (func.id == id) {
            encontrado = 1;
            printf("Digite o novo cargo: ");
            getchar();
            fgets(func.cargo, 30, stdin);
            func.cargo[strcspn(func.cargo, "\n")] = 0;
            printf("Digite o novo salário: ");
            scanf("%d", &func.salario);

            fseek(arquivo, -sizeof(Funcionario), SEEK_CUR);
            fwrite(&func, sizeof(Funcionario), 1, arquivo);
            printf("Dados do funcionário alterados com sucesso!\n");
            break;
        }
    }
    if (!encontrado) {
        printf("Funcionário não encontrado.\n");
    }
    fclose(arquivo);
}

void excluirFuncionario() {
    FILE *arquivo = fopen(ARQUIVO, "rb");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    FILE *temp = fopen("temp.dat", "wb");
    if (temp == NULL) {
        perror("Erro ao abrir arquivo temporário");
        fclose(arquivo);
        return;
    }

    int id;
    printf("Digite o ID do funcionário a ser excluído: ");
    scanf("%d", &id);

    Funcionario func;
    int encontrado = 0;
    while (fread(&func, sizeof(Funcionario), 1, arquivo)) {
        if (func.id == id) {
            encontrado = 1;
        } else {
            fwrite(&func, sizeof(Funcionario), 1, temp);
        }
    }

    fclose(arquivo);
    fclose(temp);

    remove(ARQUIVO);
    rename("temp.dat", ARQUIVO);

    if (encontrado) {
        printf("Funcionário excluído com sucesso!\n");
    } else {
        printf("Funcionário não encontrado.\n");
    }
}

void consultarFuncionario() {
    FILE *arquivo = fopen(ARQUIVO, "rb");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    int id;
    printf("Digite o ID do funcionário: ");
    scanf("%d", &id);

    Funcionario func;
    int encontrado = 0;
    while (fread(&func, sizeof(Funcionario), 1, arquivo)) {
        if (func.id == id) {
            encontrado = 1;
            printf("\nID: %d\n", func.id);
            printf("Nome: %s\n", func.nome);
            printf("Cargo: %s\n", func.cargo);
            printf("Salário: R$%d\n", func.salario);
            break;
        }
    }

    if (!encontrado) {
        printf("Funcionário não encontrado.\n");
    }

    fclose(arquivo);
}

void listarFuncionarios() {
    FILE *arquivo = fopen(ARQUIVO, "rb");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    Funcionario func;
    printf("\nLista de Funcionários Cadastrados:\n");
    while (fread(&func, sizeof(Funcionario), 1, arquivo)) {
        printf("\nID: %d\n", func.id);
        printf("Nome: %s\n", func.nome);
        printf("Cargo: %s\n", func.cargo);
        printf("Salário: R$%d\n", func.salario);
    }

    fclose(arquivo);
}

int main() {
    int opcao;
    do {
        printf("\nSistema de Cadastro de Funcionários\n");
        printf("1. Cadastrar funcionário\n");
        printf("2. Alterar dados de um funcionário\n");
        printf("3. Excluir funcionário\n");
        printf("4. Consultar funcionário\n");
        printf("5. Listar todos os funcionários\n");
        printf("0. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                cadastrarFuncionario();
                break;
            case 2:
                alterarFuncionario();
                break;
            case 3:
                excluirFuncionario();
                break;
            case 4:
                consultarFuncionario();
                break;
            case 5:
                listarFuncionarios();
                break;
            case 0:
                printf("Saindo do programa...\n");
                break;
            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    } while (opcao != 0);



questao 3 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ARQUIVO "livros.dat"

typedef struct {
    int codigo;
    char titulo[50];
    char autor[50];
    int ano;
} Livro;

void adicionarLivro() {
    FILE *arquivo = fopen(ARQUIVO, "ab");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    Livro livro;
    printf("Digite o código do livro: ");
    scanf("%d", &livro.codigo);
    getchar(); // Consumir \n
    printf("Digite o título do livro: ");
    fgets(livro.titulo, 50, stdin);
    livro.titulo[strcspn(livro.titulo, "\n")] = 0; // Remover \n
    printf("Digite o nome do autor: ");
    fgets(livro.autor, 50, stdin);
    livro.autor[strcspn(livro.autor, "\n")] = 0; // Remover \n
    printf("Digite o ano de publicação: ");
    scanf("%d", &livro.ano);

    fwrite(&livro, sizeof(Livro), 1, arquivo);
    fclose(arquivo);

    printf("Livro adicionado com sucesso!\n");
}

void alterarLivro() {
    FILE *arquivo = fopen(ARQUIVO, "rb+");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    int codigo;
    printf("Digite o código do livro a ser alterado: ");
    scanf("%d", &codigo);

    Livro livro;
    int encontrado = 0;
    while (fread(&livro, sizeof(Livro), 1, arquivo)) {
        if (livro.codigo == codigo) {
            encontrado = 1;
            printf("Digite o novo título do livro: ");
            getchar();
            fgets(livro.titulo, 50, stdin);
            livro.titulo[strcspn(livro.titulo, "\n")] = 0;
            printf("Digite o novo autor do livro: ");
            fgets(livro.autor, 50, stdin);
            livro.autor[strcspn(livro.autor, "\n")] = 0;
            printf("Digite o novo ano de publicação: ");
            scanf("%d", &livro.ano);

            fseek(arquivo, -sizeof(Livro), SEEK_CUR);
            fwrite(&livro, sizeof(Livro), 1, arquivo);
            printf("Dados do livro alterados com sucesso!\n");
            break;
        }
    }

    if (!encontrado) {
        printf("Livro não encontrado.\n");
    }
    fclose(arquivo);
}

void excluirLivro() {
    FILE *arquivo = fopen(ARQUIVO, "rb");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    FILE *temp = fopen("temp.dat", "wb");
    if (temp == NULL) {
        perror("Erro ao abrir arquivo temporário");
        fclose(arquivo);
        return;
    }

    int codigo;
    printf("Digite o código do livro a ser excluído: ");
    scanf("%d", &codigo);

    Livro livro;
    int encontrado = 0;
    while (fread(&livro, sizeof(Livro), 1, arquivo)) {
        if (livro.codigo == codigo) {
            encontrado = 1;
        } else {
            fwrite(&livro, sizeof(Livro), 1, temp);
        }
    }

    fclose(arquivo);
    fclose(temp);

    remove(ARQUIVO);
    rename("temp.dat", ARQUIVO);

    if (encontrado) {
        printf("Livro excluído com sucesso!\n");
    } else {
        printf("Livro não encontrado.\n");
    }
}

void consultarLivro() {
    FILE *arquivo = fopen(ARQUIVO, "rb");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    int codigo;
    printf("Digite o código do livro: ");
    scanf("%d", &codigo);

    Livro livro;
    int encontrado = 0;
    while (fread(&livro, sizeof(Livro), 1, arquivo)) {
        if (livro.codigo == codigo) {
            encontrado = 1;
            printf("\nCódigo: %d\n", livro.codigo);
            printf("Título: %s\n", livro.titulo);
            printf("Autor: %s\n", livro.autor);
            printf("Ano de Publicação: %d\n", livro.ano);
            break;
        }
    }

    if (!encontrado) {
        printf("Livro não encontrado.\n");
    }

    fclose(arquivo);
}

void listarLivros() {
    FILE *arquivo = fopen(ARQUIVO, "rb");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    Livro livro;
    printf("\nLista de Livros Cadastrados:\n");
    while (fread(&livro, sizeof(Livro), 1, arquivo)) {
        printf("\nCódigo: %d\n", livro.codigo);
        printf("Título: %s\n", livro.titulo);
        printf("Autor: %s\n", livro.autor);
        printf("Ano de Publicação: %d\n", livro.ano);
    }

    fclose(arquivo);
}

int main() {
    int opcao;
    do {
        printf("\nSistema de Gerenciamento de Livros\n");
        printf("1. Adicionar livro\n");
        printf("2. Alterar dados de um livro\n");
        printf("3. Excluir livro\n");
        printf("4. Consultar livro\n");
        printf("5. Listar todos os livros\n");
        printf("0. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                adicionarLivro();
                break;
            case 2:
                alterarLivro();
                break;
            case 3:
                excluirLivro();
                break;
            case 4:
                consultarLivro();
                break;
            case 5:
                listarLivros();
                break;
            case 0:
                printf("Saindo do programa...\n");
                break;
            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    } while (opcao != 0);




    questao 4 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ARQUIVO "veiculos.dat"

typedef struct {
    int id;
    char modelo[50];
    char placa[10];
    int ano;
} Veiculo;

void adicionarVeiculo() {
    FILE *arquivo = fopen(ARQUIVO, "ab");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    Veiculo veiculo;
    printf("Digite o ID do veículo: ");
    scanf("%d", &veiculo.id);
    getchar(); // Consumir \n
    printf("Digite o modelo do veículo: ");
    fgets(veiculo.modelo, 50, stdin);
    veiculo.modelo[strcspn(veiculo.modelo, "\n")] = 0; // Remover \n
    printf("Digite a placa do veículo: ");
    fgets(veiculo.placa, 10, stdin);
    veiculo.placa[strcspn(veiculo.placa, "\n")] = 0; // Remover \n
    printf("Digite o ano de fabricação: ");
    scanf("%d", &veiculo.ano);

    fwrite(&veiculo, sizeof(Veiculo), 1, arquivo);
    fclose(arquivo);

    printf("Veículo adicionado com sucesso!\n");
}

void alterarVeiculo() {
    FILE *arquivo = fopen(ARQUIVO, "rb+");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    int id;
    printf("Digite o ID do veículo a ser alterado: ");
    scanf("%d", &id);

    Veiculo veiculo;
    int encontrado = 0;
    while (fread(&veiculo, sizeof(Veiculo), 1, arquivo)) {
        if (veiculo.id == id) {
            encontrado = 1;
            printf("Digite o novo modelo do veículo: ");
            getchar();
            fgets(veiculo.modelo, 50, stdin);
            veiculo.modelo[strcspn(veiculo.modelo, "\n")] = 0;
            printf("Digite a nova placa do veículo: ");
            fgets(veiculo.placa, 10, stdin);
            veiculo.placa[strcspn(veiculo.placa, "\n")] = 0;
            printf("Digite o novo ano de fabricação: ");
            scanf("%d", &veiculo.ano);

            fseek(arquivo, -sizeof(Veiculo), SEEK_CUR);
            fwrite(&veiculo, sizeof(Veiculo), 1, arquivo);
            printf("Dados do veículo alterados com sucesso!\n");
            break;
        }
    }

    if (!encontrado) {
        printf("Veículo não encontrado.\n");
    }
    fclose(arquivo);
}

void excluirVeiculo() {
    FILE *arquivo = fopen(ARQUIVO, "rb");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    FILE *temp = fopen("temp.dat", "wb");
    if (temp == NULL) {
        perror("Erro ao abrir arquivo temporário");
        fclose(arquivo);
        return;
    }

    int id;
    printf("Digite o ID do veículo a ser excluído: ");
    scanf("%d", &id);

    Veiculo veiculo;
    int encontrado = 0;
    while (fread(&veiculo, sizeof(Veiculo), 1, arquivo)) {
        if (veiculo.id == id) {
            encontrado = 1;
        } else {
            fwrite(&veiculo, sizeof(Veiculo), 1, temp);
        }
    }

    fclose(arquivo);
    fclose(temp);

    remove(ARQUIVO);
    rename("temp.dat", ARQUIVO);

    if (encontrado) {
        printf("Veículo excluído com sucesso!\n");
    } else {
        printf("Veículo não encontrado.\n");
    }
}

void consultarVeiculo() {
    FILE *arquivo = fopen(ARQUIVO, "rb");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    char placa[10];
    printf("Digite a placa do veículo: ");
    getchar();
    fgets(placa, 10, stdin);
    placa[strcspn(placa, "\n")] = 0; // Remover \n

    Veiculo veiculo;
    int encontrado = 0;
    while (fread(&veiculo, sizeof(Veiculo), 1, arquivo)) {
        if (strcmp(veiculo.placa, placa) == 0) {
            encontrado = 1;
            printf("\nID: %d\n", veiculo.id);
            printf("Modelo: %s\n", veiculo.modelo);
            printf("Placa: %s\n", veiculo.placa);
            printf("Ano de Fabricação: %d\n", veiculo.ano);
            break;
        }
    }

    if (!encontrado) {
        printf("Veículo não encontrado.\n");
    }

    fclose(arquivo);
}

void listarVeiculos() {
    FILE *arquivo = fopen(ARQUIVO, "rb");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    Veiculo veiculo;
    printf("\nLista de Veículos Cadastrados:\n");
    while (fread(&veiculo, sizeof(Veiculo), 1, arquivo)) {
        printf("\nID: %d\n", veiculo.id);
        printf("Modelo: %s\n", veiculo.modelo);
        printf("Placa: %s\n", veiculo.placa);
        printf("Ano de Fabricação: %d\n", veiculo.ano);
    }

    fclose(arquivo);
}

int main() {
    int opcao;
    do {
        printf("\nSistema de Registro de Veículos\n");
        printf("1. Adicionar veículo\n");
        printf("2. Alterar dados de um veículo\n");
        printf("3. Excluir veículo\n");
        printf("4. Consultar veículo pela placa\n");
        printf("5. Listar todos os veículos\n");
        printf("0. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                adicionarVeiculo();
                break;
            case 2:
                alterarVeiculo();
                break;
            case 3:
                excluirVeiculo();
                break;
            case 4:
                consultarVeiculo();
                break;
            case 5:
                listarVeiculos();
                break;
            case 0:
                printf("Saindo do programa...\n");
                break;
            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    } while (opcao != 0);



questao 5 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ARQUIVO "filmes.dat"
typedef struct {
    int id;
    char titulo[50];
    char genero[20];
    int ano;
} Filme;

void adicionarFilme() {
    FILE *arquivo = fopen(ARQUIVO, "ab");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    Filme filme;
    printf("Digite o ID do filme: ");
    scanf("%d", &filme.id);
    getchar(); 
    printf("Digite o título do filme: ");
    fgets(filme.titulo, 50, stdin);
    filme.titulo[strcspn(filme.titulo, "\n")] = 0; 
    printf("Digite o gênero do filme: ");
    fgets(filme.genero, 20, stdin);
    filme.genero[strcspn(filme.genero, "\n")] = 0; 
    printf("Digite o ano de lançamento: ");
    scanf("%d", &filme.ano);

    fwrite(&filme, sizeof(Filme), 1, arquivo);
    fclose(arquivo);

    printf("Filme adicionado com sucesso!\n");
}

void alterarFilme() {
    FILE *arquivo = fopen(ARQUIVO, "rb+");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    int id;
    printf("Digite o ID do filme a ser alterado: ");
    scanf("%d", &id);

    Filme filme;
    int encontrado = 0;
    while (fread(&filme, sizeof(Filme), 1, arquivo)) {
        if (filme.id == id) {
            encontrado = 1;
            printf("Digite o novo título do filme: ");
            getchar();
            fgets(filme.titulo, 50, stdin);
            filme.titulo[strcspn(filme.titulo, "\n")] = 0;
            printf("Digite o novo gênero do filme: ");
            fgets(filme.genero, 20, stdin);
            filme.genero[strcspn(filme.genero, "\n")] = 0;
            printf("Digite o novo ano de lançamento: ");
            scanf("%d", &filme.ano);

            fseek(arquivo, -sizeof(Filme), SEEK_CUR);
            fwrite(&filme, sizeof(Filme), 1, arquivo);
            printf("Dados do filme alterados com sucesso!\n");
            break;
        }
    }

    if (!encontrado) {
        printf("Filme não encontrado.\n");
    }
    fclose(arquivo);
}

void excluirFilme() {
    FILE *arquivo = fopen(ARQUIVO, "rb");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    FILE *temp = fopen("temp.dat", "wb");
    if (temp == NULL) {
        perror("Erro ao abrir arquivo temporário");
        fclose(arquivo);
        return;
    }

    int id;
    printf("Digite o ID do filme a ser excluído: ");
    scanf("%d", &id);

    Filme filme;
    int encontrado = 0;
    while (fread(&filme, sizeof(Filme), 1, arquivo)) {
        if (filme.id == id) {
            encontrado = 1;
        } else {
            fwrite(&filme, sizeof(Filme), 1, temp);
        }
    }

    fclose(arquivo);
    fclose(temp);

    remove(ARQUIVO);
    rename("temp.dat", ARQUIVO);

    if (encontrado) {
        printf("Filme excluído com sucesso!\n");
    } else {
        printf("Filme não encontrado.\n");
    }
}

void consultarFilme() {
    FILE *arquivo = fopen(ARQUIVO, "rb");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    int id;
    printf("Digite o ID do filme: ");
    scanf("%d", &id);

    Filme filme;
    int encontrado = 0;
    while (fread(&filme, sizeof(Filme), 1, arquivo)) {
        if (filme.id == id) {
            encontrado = 1;
            printf("\nID: %d\n", filme.id);
            printf("Título: %s\n", filme.titulo);
            printf("Gênero: %s\n", filme.genero);
            printf("Ano de Lançamento: %d\n", filme.ano);
            break;
        }
    }

    if (!encontrado) {
        printf("Filme não encontrado.\n");
    }

    fclose(arquivo);
}

void listarFilmes() {
    FILE *arquivo = fopen(ARQUIVO, "rb");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    Filme filme;
    printf("\nLista de Filmes Cadastrados:\n");
    while (fread(&filme, sizeof(Filme), 1, arquivo)) {
        printf("\nID: %d\n", filme.id);
        printf("Título: %s\n", filme.titulo);
        printf("Gênero: %s\n", filme.genero);
        printf("Ano de Lançamento: %d\n", filme.ano);
    }

    fclose(arquivo);
}

int main() {
    int opcao;
    do {
        printf("\nSistema de Controle de Filmes\n");
        printf("1. Adicionar filme\n");
        printf("2. Alterar dados de um filme\n");
        printf("3. Excluir filme\n");
        printf("4. Consultar filme pelo ID\n");
        printf("5. Listar todos os filmes\n");
        printf("0. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                adicionarFilme();
                break;
            case 2:
                alterarFilme();
                break;
            case 3:
                excluirFilme();
                break;
            case 4:
                consultarFilme();
                break;
            case 5:
                listarFilmes();
                break;
            case 0:
                printf("Saindo do programa...\n");
                break;
            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    } while (opcao != 0);     



    questao 6 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ARQUIVO "cidades.txt"

typedef struct {
    int codigo;
    char nome[50];
    char estado[30];
    int populacao;
} Cidade;

void incluirCidade() {
    FILE *arquivo = fopen(ARQUIVO, "a");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    Cidade cidade;
    printf("Digite o código da cidade: ");
    scanf("%d", &cidade.codigo);
    getchar(); // Consumir \n
    printf("Digite o nome da cidade: ");
    fgets(cidade.nome, 50, stdin);
    cidade.nome[strcspn(cidade.nome, "\n")] = 0; // Remover \n
    printf("Digite o estado da cidade: ");
    fgets(cidade.estado, 30, stdin);
    cidade.estado[strcspn(cidade.estado, "\n")] = 0; // Remover \n
    printf("Digite a população da cidade: ");
    scanf("%d", &cidade.populacao);

    fprintf(arquivo, "%d,%s,%s,%d\n", cidade.codigo, cidade.nome, cidade.estado, cidade.populacao);
    fclose(arquivo);

    printf("Cidade adicionada com sucesso!\n");
}

void alterarCidade() {
    FILE *arquivo = fopen(ARQUIVO, "r");
    FILE *temp = fopen("temp.txt", "w");
    if (arquivo == NULL || temp == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    int codigo;
    printf("Digite o código da cidade a ser alterada: ");
    scanf("%d", &codigo);

    Cidade cidade;
    int encontrado = 0;
    while (fscanf(arquivo, "%d,%49[^,],%29[^,],%d\n", &cidade.codigo, cidade.nome, cidade.estado, &cidade.populacao) != EOF) {
        if (cidade.codigo == codigo) {
            encontrado = 1;
            printf("Digite o novo nome da cidade: ");
            getchar();
            fgets(cidade.nome, 50, stdin);
            cidade.nome[strcspn(cidade.nome, "\n")] = 0;
            printf("Digite o novo estado da cidade: ");
            fgets(cidade.estado, 30, stdin);
            cidade.estado[strcspn(cidade.estado, "\n")] = 0;
            printf("Digite a nova população da cidade: ");
            scanf("%d", &cidade.populacao);
        }
        fprintf(temp, "%d,%s,%s,%d\n", cidade.codigo, cidade.nome, cidade.estado, cidade.populacao);
    }

    fclose(arquivo);
    fclose(temp);

    remove(ARQUIVO);
    rename("temp.txt", ARQUIVO);

    if (encontrado) {
        printf("Cidade alterada com sucesso!\n");
    } else {
        printf("Cidade não encontrada.\n");
    }
}

void excluirCidade() {
    FILE *arquivo = fopen(ARQUIVO, "r");
    FILE *temp = fopen("temp.txt", "w");
    if (arquivo == NULL || temp == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    int codigo;
    printf("Digite o código da cidade a ser excluída: ");
    scanf("%d", &codigo);

    Cidade cidade;
    int encontrado = 0;
    while (fscanf(arquivo, "%d,%49[^,],%29[^,],%d\n", &cidade.codigo, cidade.nome, cidade.estado, &cidade.populacao) != EOF) {
        if (cidade.codigo == codigo) {
            encontrado = 1;
        } else {
            fprintf(temp, "%d,%s,%s,%d\n", cidade.codigo, cidade.nome, cidade.estado, cidade.populacao);
        }
    }

    fclose(arquivo);
    fclose(temp);

    remove(ARQUIVO);
    rename("temp.txt", ARQUIVO);

    if (encontrado) {
        printf("Cidade excluída com sucesso!\n");
    } else {
        printf("Cidade não encontrada.\n");
    }
}

void consultarCidade() {
    FILE *arquivo = fopen(ARQUIVO, "r");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    int codigo;
    printf("Digite o código da cidade: ");
    scanf("%d", &codigo);

    Cidade cidade;
    int encontrado = 0;
    while (fscanf(arquivo, "%d,%49[^,],%29[^,],%d\n", &cidade.codigo, cidade.nome, cidade.estado, &cidade.populacao) != EOF) {
        if (cidade.codigo == codigo) {
            encontrado = 1;
            printf("\nCódigo: %d\n", cidade.codigo);
            printf("Nome: %s\n", cidade.nome);
            printf("Estado: %s\n", cidade.estado);
            printf("População: %d\n", cidade.populacao);
            break;
        }
    }

    if (!encontrado) {
        printf("Cidade não encontrada.\n");
    }

    fclose(arquivo);
}

void listarCidades() {
    FILE *arquivo = fopen(ARQUIVO, "r");
    if (arquivo == NULL) {
        perror("Erro ao abrir arquivo");
        return;
    }

    Cidade cidade;
    printf("\nLista de Cidades Cadastradas:\n");
    while (fscanf(arquivo, "%d,%49[^,],%29[^,],%d\n", &cidade.codigo, cidade.nome, cidade.estado, &cidade.populacao) != EOF) {
        printf("\nCódigo: %d\n", cidade.codigo);
        printf("Nome: %s\n", cidade.nome);
        printf("Estado: %s\n", cidade.estado);
        printf("População: %d\n", cidade.populacao);
    }

    fclose(arquivo);
}

int main() {
    int opcao;
    do {
        printf("\nSistema de Cadastro de Cidades\n");
        printf("1. Incluir cidade\n");
        printf("2. Alterar dados de uma cidade\n");
        printf("3. Excluir cidade\n");
        printf("4. Consultar cidade pelo código\n");
        printf("5. Listar todas as cidades\n");
        printf("0. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                incluirCidade();
                break;
            case 2:
                alterarCidade();
                break;
            case 3:
                excluirCidade();
                break;
            case 4:
                consultarCidade();
                break;
            case 5:
                listarCidades();
                break;
            case 0:
                printf("Saindo do programa...\n");
                break;
            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    } while (opcao != 0);
    









    
